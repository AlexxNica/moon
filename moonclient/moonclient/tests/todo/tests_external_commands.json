{
  "command_options": "-f value",
  "tests_group": {
    "main": [
      {
        "auth_name": "admin",
        "description": "Change user to admin (just in case...)"
      },

      {
        "name": "list tenant",
        "command": "tenant list",
        "no_result": "demo",
        "description": "List all tenants (must be empty)"
      },
      {
        "name": "add tenant demo",
        "command": "tenant add demo",
        "result": "^$",
        "description": "Add a new tenant",
        "command_options": ""
      },
      {
        "name": "check tenant demo",
        "command": "tenant list",
        "result": "(?P<uuid>\\w+)\\s+demo",
        "description": "Check that tenant demo has been correctly added"
      },
      {
        "name": "create_intraextension_admin",
        "command": "intraextension add --policy_model policy_rbac_admin admin_test",
        "result": "IntraExtension created: (?P<uuid_admin>\\w+)",
        "description": "Create an admin intra extension",
        "command_options": ""
      },
      {
        "name": "list_intraextension_admin",
        "command": "intraextension list",
        "result": "$uuid_admin",
        "description": "Check the existence of that admin intra extension"
      },
      {
        "name": "create_intraextension_authz",
        "command": "intraextension add --policy_model policy_authz authz_test",
        "result": "IntraExtension created: (?P<uuid_authz>\\w+)",
        "description": "Create an authz intra extension",
        "command_options": ""
      },
      {
        "name": "list_intraextension_authz",
        "command": "intraextension list",
        "result": "$uuid_authz",
        "description": "Check the existence of that authz intra extension"
      },
      {
        "name": "set_tenant_authz",
        "command": "tenant set --authz $uuid_authz $uuid",
        "result": "",
        "description": "Connect the authz intra extension to the tenant demo",
        "command_options": ""
      },
      {
        "name": "check authz ie for tenant demo",
        "command": "tenant list",
        "result": "demo $uuid_authz",
        "description": "Check that authz ie has been correctly added for tenant demo ",
        "command_options": "-c name -c intra_authz_extension_id -f value"
      },
      {
        "name": "select_authz_ie",
        "command": "intraextension select $uuid_authz",
        "result": "Select $uuid_authz IntraExtension.",
        "description": "Select the authz IntraExtension",
        "command_options": ""
      },
      {
        "name": "check_select_authz_ie",
        "command": "intraextension show selected",
        "result": "$uuid_authz",
        "description": "Check the selected authz IntraExtension",
        "command_options": "-c id -f value"
      },
      {
        "name": "set_tenant_admin",
        "command": "tenant set --admin $uuid_admin $uuid",
        "result": "",
        "description": "Connect the admin intra extension to the tenant demo",
        "command_options": ""
      },
      {
        "name": "check admin ie for tenant demo",
        "command": "tenant list",
        "result": "demo $uuid_admin",
        "description": "Check that admin ie has been correctly added for tenant demo ",
        "command_options": "-c name -c intra_admin_extension_id -f value"
      },

      {
        "name": "get aggregation algorithm",
        "command": "aggregation algorithm list",
        "result": "(?P<uuid_aggregation>\\w+)\\s+one_true",
        "description": "Get aggregation algorithm.",
        "command_options": "-c id -c name -f value"
      },
      {
        "name": "set aggregation algorithm",
        "command": "aggregation algorithm set $uuid_aggregation",
        "result": "",
        "description": "Set aggregation algorithm to one_true.",
        "command_options": ""
      },
      {
        "name": "get aggregation algorithm",
        "command": "aggregation algorithm show",
        "result": "$uuid_aggregation\\s+one_true",
        "description": "Check aggregation algorithm.",
        "command_options": "-c id -c name -f value"
      },

      {
        "name": "get cirros image",
        "external_command": "wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img -o /tmp/cirros.img",
        "result": "",
        "description": "Download a Cirros image"
      },
      {
        "name": "install cirros image",
        "external_command": "glance image-create --name \"cirros\"  --disk-format qcow2 --file /tmp/cirros.img --container-format bare",
        "result": "",
        "description": "Upload the Cirros image in glance"
      },
      {
        "name": "create secgroup",
        "external_command": "nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0",
        "result": "",
        "description": "Create a new secgroup in Nova"
      },
      {
        "name": "create secgroup",
        "external_command": "nova secgroup-add-rule default tcp 22 22 0.0.0.0/0",
        "result": "",
        "description": "Create a new secgroup in Nova"
      },
      {
        "name": "create router",
        "external_command": "neutron router-create demo-router",
        "result": "",
        "description": "Create a new router"
      },
      {
        "name": "set router",
        "external_command": "neutron router-gateway-set demo-router ext-net",
        "result": "",
        "description": "Configure the new router"
      },
      {
        "name": "set router",
        "external_command": "neutron net-create demo-net",
        "result": "",
        "description": "Configure the new router"
      },
      {
        "name": "set router",
        "external_command": "neutron subnet-create demo-net 192.168.1.0/24 --name demo-subnet --gateway 192.168.1.1",
        "result": "",
        "description": "Configure the new router"
      },
      {
        "name": "set router",
        "external_command": "neutron router-interface-add demo-router demo-subnet",
        "result": "",
        "description": "Configure the new router"
      },
      {
        "name": "nova image-list",
        "external_command": "nova image-list",
        "result": "(?P<uuid_image>[\\w-]+)\\s+\\| cirros",
        "description": "Get an Image ID"
      },
      {
        "name": "neutron net-list",
        "external_command": "neutron net-list",
        "result": "(?P<uuid_net>[\\w-]+)\\s+\\| ext-net",
        "description": "Get an Net ID"
      },
      {
        "name": "nova boot new server",
        "external_command": "nova boot  --flavor m1.tiny --image $uuid_image --nic net-id=$uuid_net --security-group default test_moonclient",
        "result": "",
        "description": "Get an Image ID"
      },
      {
        "name": "sleep",
        "external_command": "sleep 10",
        "result": "",
        "description": "time for server to really boot"
      },
      {
        "name": "check nova command",
        "external_command": "nova list",
        "result": "\\| (?P<uuid_server>[\\w\\-]+)\\s+\\| (?P<name_server>\\w+)\\s+\\| ACTIVE\\s+\\| [\\w\\-]+\\s+\\| Running",
        "description": "Check that nova is running and get the ID of one running server"
      },

      {
        "name": "delete_admin_intra_extension",
        "command": "intraextension delete $uuid_admin",
        "result": "",
        "description": "Delete the admin intra extension",
        "command_options": ""
      },
      {
        "name": "delete_authz_intra_extension",
        "command": "intraextension delete $uuid_authz",
        "result": "",
        "description": "Delete the authz intra extension",
        "command_options": ""
      },
      {
        "name": "delete_tenant",
        "command": "tenant delete $uuid",
        "result": "",
        "description": "Delete the tenant demo",
        "command_options": ""
      }
    ]
  }
}